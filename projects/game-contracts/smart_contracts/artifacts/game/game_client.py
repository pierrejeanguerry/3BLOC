# flake8: noqa
# fmt: off
# mypy: disable-error-code="no-any-return, no-untyped-call, misc, type-arg"
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^1.2.0
import base64
import dataclasses
import decimal
import typing
from abc import ABC, abstractmethod

import algokit_utils
import algosdk
from algosdk.v2client import models
from algosdk.atomic_transaction_composer import (
    AtomicTransactionComposer,
    AtomicTransactionResponse,
    SimulateAtomicTransactionResponse,
    TransactionSigner,
    TransactionWithSigner
)

_APP_SPEC_JSON = r"""{
    "hints": {
        "register(string)(uint64,string,uint64)": {
            "structs": {
                "output": {
                    "name": "User",
                    "elements": [
                        [
                            "registered_at",
                            "uint64"
                        ],
                        [
                            "name",
                            "string"
                        ],
                        [
                            "balance",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "fund_account(pay)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "buy_asset(byte[],uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "admin_upsert_asset((string,string,uint64))void": {
            "structs": {
                "asset": {
                    "name": "GameAsset",
                    "elements": [
                        [
                            "name",
                            "string"
                        ],
                        [
                            "description",
                            "string"
                        ],
                        [
                            "price",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "sellback_asset(byte[],uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuZ2FtZS5jb250cmFjdC5HYW1lLmFwcHJvdmFsX3Byb2dyYW06CiAgICBpbnRjYmxvY2sgMSAwIDggNDAwCiAgICBieXRlY2Jsb2NrICJ1c2VyIiAiYXNzZXQiIDB4MTUxZjdjNzUgInVzZXJfYXNzZXQiCiAgICBjYWxsc3ViIF9fcHV5YV9hcmM0X3JvdXRlcl9fCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMuZ2FtZS5jb250cmFjdC5HYW1lLl9fcHV5YV9hcmM0X3JvdXRlcl9fKCkgLT4gdWludDY0OgpfX3B1eWFfYXJjNF9yb3V0ZXJfXzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjMyCiAgICAvLyBjbGFzcyBHYW1lKEFSQzRDb250cmFjdCk6CiAgICBwcm90byAwIDEKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBfX3B1eWFfYXJjNF9yb3V0ZXJfX19iYXJlX3JvdXRpbmdAOQogICAgcHVzaGJ5dGVzcyAweDE0MzFmODU2IDB4ZWM0NzZkYmQgMHg4MjhmMzBkMyAweDY5ZjVjODYzIDB4ZTYxODM3ZGMgLy8gbWV0aG9kICJyZWdpc3RlcihzdHJpbmcpKHVpbnQ2NCxzdHJpbmcsdWludDY0KSIsIG1ldGhvZCAiZnVuZF9hY2NvdW50KHBheSl1aW50NjQiLCBtZXRob2QgImJ1eV9hc3NldChieXRlW10sdWludDY0KXZvaWQiLCBtZXRob2QgImFkbWluX3Vwc2VydF9hc3NldCgoc3RyaW5nLHN0cmluZyx1aW50NjQpKXZvaWQiLCBtZXRob2QgInNlbGxiYWNrX2Fzc2V0KGJ5dGVbXSx1aW50NjQpdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIF9fcHV5YV9hcmM0X3JvdXRlcl9fX3JlZ2lzdGVyX3JvdXRlQDIgX19wdXlhX2FyYzRfcm91dGVyX19fZnVuZF9hY2NvdW50X3JvdXRlQDMgX19wdXlhX2FyYzRfcm91dGVyX19fYnV5X2Fzc2V0X3JvdXRlQDQgX19wdXlhX2FyYzRfcm91dGVyX19fYWRtaW5fdXBzZXJ0X2Fzc2V0X3JvdXRlQDUgX19wdXlhX2FyYzRfcm91dGVyX19fc2VsbGJhY2tfYXNzZXRfcm91dGVANgogICAgaW50Y18xIC8vIDAKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19fcmVnaXN0ZXJfcm91dGVAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjM4CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MzIKICAgIC8vIGNsYXNzIEdhbWUoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjM4CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgcmVnaXN0ZXIKICAgIGJ5dGVjXzIgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX2Z1bmRfYWNjb3VudF9yb3V0ZUAzOgogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6NTYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weTozMgogICAgLy8gY2xhc3MgR2FtZShBUkM0Q29udHJhY3QpOgogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludGNfMCAvLyAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weTo1NgogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIGZ1bmRfYWNjb3VudAogICAgYnl0ZWNfMiAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19fYnV5X2Fzc2V0X3JvdXRlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weTo3NgogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjMyCiAgICAvLyBjbGFzcyBHYW1lKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6NzYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBidXlfYXNzZXQKICAgIGludGNfMCAvLyAxCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX2FkbWluX3Vwc2VydF9hc3NldF9yb3V0ZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MTA3CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MzIKICAgIC8vIGNsYXNzIEdhbWUoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjEwNwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIGFkbWluX3Vwc2VydF9hc3NldAogICAgaW50Y18wIC8vIDEKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19fc2VsbGJhY2tfYXNzZXRfcm91dGVANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjExOQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjMyCiAgICAvLyBjbGFzcyBHYW1lKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MTE5CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgc2VsbGJhY2tfYXNzZXQKICAgIGludGNfMCAvLyAxCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX2JhcmVfcm91dGluZ0A5OgogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MzIKICAgIC8vIGNsYXNzIEdhbWUoQVJDNENvbnRyYWN0KToKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGJueiBfX3B1eWFfYXJjNF9yb3V0ZXJfX19hZnRlcl9pZl9lbHNlQDEzCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgaW50Y18wIC8vIDEKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19fYWZ0ZXJfaWZfZWxzZUAxMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjMyCiAgICAvLyBjbGFzcyBHYW1lKEFSQzRDb250cmFjdCk6CiAgICBpbnRjXzEgLy8gMAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmdhbWUuY29udHJhY3QuR2FtZS5yZWdpc3RlcihuYW1lOiBieXRlcykgLT4gYnl0ZXM6CnJlZ2lzdGVyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MzgtMzkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIHJlZ2lzdGVyKHNlbGYsIG5hbWU6IGFyYzQuU3RyaW5nKSAtPiBVc2VyOgogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weTo0OAogICAgLy8gaWYgVHhuLnNlbmRlciBub3QgaW4gc2VsZi51c2VyOgogICAgYnl0ZWNfMCAvLyAidXNlciIKICAgIHR4biBTZW5kZXIKICAgIGNvbmNhdAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBibnogcmVnaXN0ZXJfYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weTo1MAogICAgLy8gcmVnaXN0ZXJlZF9hdD1hcmM0LlVJbnQ2NChHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcCksCiAgICBnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weTo0OS01MwogICAgLy8gc2VsZi51c2VyW1R4bi5zZW5kZXJdID0gVXNlcigKICAgIC8vICAgICByZWdpc3RlcmVkX2F0PWFyYzQuVUludDY0KEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wKSwKICAgIC8vICAgICBuYW1lPW5hbWUsCiAgICAvLyAgICAgYmFsYW5jZT1hcmM0LlVJbnQ2NCgwKSwKICAgIC8vICkKICAgIHB1c2hieXRlcyAweDAwMTIKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6NTIKICAgIC8vIGJhbGFuY2U9YXJjNC5VSW50NjQoMCksCiAgICBwdXNoYnl0ZXMgMHgwMDAwMDAwMDAwMDAwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weTo0OS01MwogICAgLy8gc2VsZi51c2VyW1R4bi5zZW5kZXJdID0gVXNlcigKICAgIC8vICAgICByZWdpc3RlcmVkX2F0PWFyYzQuVUludDY0KEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wKSwKICAgIC8vICAgICBuYW1lPW5hbWUsCiAgICAvLyAgICAgYmFsYW5jZT1hcmM0LlVJbnQ2NCgwKSwKICAgIC8vICkKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjQ5CiAgICAvLyBzZWxmLnVzZXJbVHhuLnNlbmRlcl0gPSBVc2VyKAogICAgYnl0ZWNfMCAvLyAidXNlciIKICAgIHR4biBTZW5kZXIKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6NDktNTMKICAgIC8vIHNlbGYudXNlcltUeG4uc2VuZGVyXSA9IFVzZXIoCiAgICAvLyAgICAgcmVnaXN0ZXJlZF9hdD1hcmM0LlVJbnQ2NChHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcCksCiAgICAvLyAgICAgbmFtZT1uYW1lLAogICAgLy8gICAgIGJhbGFuY2U9YXJjNC5VSW50NjQoMCksCiAgICAvLyApCiAgICBkdXAKICAgIGJveF9kZWwKICAgIHBvcAogICAgc3dhcAogICAgYm94X3B1dAoKcmVnaXN0ZXJfYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6NTQKICAgIC8vIHJldHVybiBzZWxmLnVzZXJbVHhuLnNlbmRlcl0KICAgIGJ5dGVjXzAgLy8gInVzZXIiCiAgICB0eG4gU2VuZGVyCiAgICBjb25jYXQKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnVzZXIgZW50cnkgZXhpc3RzCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuZ2FtZS5jb250cmFjdC5HYW1lLmZ1bmRfYWNjb3VudChwYXltZW50OiB1aW50NjQpIC0+IGJ5dGVzOgpmdW5kX2FjY291bnQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weTo1Ni01NwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgZnVuZF9hY2NvdW50KHNlbGYsIHBheW1lbnQ6IGd0eG4uUGF5bWVudFRyYW5zYWN0aW9uKSAtPiBhcmM0LlVJbnQ2NDoKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6NjcKICAgIC8vIHBheW1lbnQucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBSZWNlaXZlcgogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weTo2Ni02OAogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBwYXltZW50LnJlY2VpdmVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIC8vICksICJQYXltZW50IHJlY2VpdmVyIG11c3QgYmUgdGhlIGFwcGxpY2F0aW9uIGFkZHJlc3MiCiAgICBhc3NlcnQgLy8gUGF5bWVudCByZWNlaXZlciBtdXN0IGJlIHRoZSBhcHBsaWNhdGlvbiBhZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weTo2OQogICAgLy8gYXNzZXJ0IHBheW1lbnQuc2VuZGVyIGluIHNlbGYudXNlciwgIlVzZXIgbXVzdCBiZSByZWdpc3RlcmVkIgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBTZW5kZXIKICAgIGJ5dGVjXzAgLy8gInVzZXIiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gVXNlciBtdXN0IGJlIHJlZ2lzdGVyZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjcyCiAgICAvLyBzZWxmLnVzZXJbcGF5bWVudC5zZW5kZXJdLmJhbGFuY2UubmF0aXZlICsgcGF5bWVudC5hbW91bnQKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudXNlciBlbnRyeSBleGlzdHMKICAgIGV4dHJhY3QgMTAgOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgQW1vdW50CiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weTo3MS03MwogICAgLy8gc2VsZi51c2VyW3BheW1lbnQuc2VuZGVyXS5iYWxhbmNlID0gYXJjNC5VSW50NjQoCiAgICAvLyAgICAgc2VsZi51c2VyW3BheW1lbnQuc2VuZGVyXS5iYWxhbmNlLm5hdGl2ZSArIHBheW1lbnQuYW1vdW50CiAgICAvLyApCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weTo3MQogICAgLy8gc2VsZi51c2VyW3BheW1lbnQuc2VuZGVyXS5iYWxhbmNlID0gYXJjNC5VSW50NjQoCiAgICBkaWcgMQogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudXNlciBlbnRyeSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjcxLTczCiAgICAvLyBzZWxmLnVzZXJbcGF5bWVudC5zZW5kZXJdLmJhbGFuY2UgPSBhcmM0LlVJbnQ2NCgKICAgIC8vICAgICBzZWxmLnVzZXJbcGF5bWVudC5zZW5kZXJdLmJhbGFuY2UubmF0aXZlICsgcGF5bWVudC5hbW91bnQKICAgIC8vICkKICAgIHN3YXAKICAgIHJlcGxhY2UyIDEwCiAgICBkaWcgMQogICAgYm94X2RlbAogICAgcG9wCiAgICBkaWcgMQogICAgc3dhcAogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6NzQKICAgIC8vIHJldHVybiBzZWxmLnVzZXJbcGF5bWVudC5zZW5kZXJdLmJhbGFuY2UKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnVzZXIgZW50cnkgZXhpc3RzCiAgICBleHRyYWN0IDEwIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuZ2FtZS5jb250cmFjdC5HYW1lLmJ1eV9hc3NldChhc3NldF9pZDogYnl0ZXMsIHF1YW50aXR5OiB1aW50NjQpIC0+IHZvaWQ6CmJ1eV9hc3NldDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5Ojc2LTc3CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBidXlfYXNzZXQoc2VsZiwgYXNzZXRfaWQ6IEhhc2gsIHF1YW50aXR5OiBRdWFudGl0eSkgLT4gTm9uZToKICAgIHByb3RvIDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6ODQKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyIGluIHNlbGYudXNlciwgIlVzZXIgbXVzdCBiZSByZWdpc3RlcmVkIgogICAgYnl0ZWNfMCAvLyAidXNlciIKICAgIHR4biBTZW5kZXIKICAgIGNvbmNhdAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gVXNlciBtdXN0IGJlIHJlZ2lzdGVyZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5Ojg1CiAgICAvLyBhc3NlcnQgYXNzZXRfaWQgaW4gc2VsZi5hc3NldCwgIkludmFsaWQgYXNzZXQgSUQiCiAgICBieXRlY18xIC8vICJhc3NldCIKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICBkdXAKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIEludmFsaWQgYXNzZXQgSUQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5Ojg3CiAgICAvLyB1c2VyX2JhbGFuY2UgPSBzZWxmLnVzZXJbVHhuLnNlbmRlcl0uYmFsYW5jZS5uYXRpdmUKICAgIGJ5dGVjXzAgLy8gInVzZXIiCiAgICB0eG4gU2VuZGVyCiAgICBjb25jYXQKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnVzZXIgZW50cnkgZXhpc3RzCiAgICBleHRyYWN0IDEwIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weTo4OAogICAgLy8gYXNzZXRfcHJpY2UgPSBzZWxmLmFzc2V0W2Fzc2V0X2lkXS5wcmljZS5uYXRpdmUKICAgIGRpZyAxCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hc3NldCBlbnRyeSBleGlzdHMKICAgIGV4dHJhY3QgNCA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6OTAKICAgIC8vIGEgPSA4ICsgc2VsZi5hc3NldFthc3NldF9pZF0uYnl0ZXMubGVuZ3RoCiAgICB1bmNvdmVyIDIKICAgIGJveF9sZW4KICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFzc2V0IGVudHJ5IGV4aXN0cwogICAgaW50Y18yIC8vIDgKICAgICsKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjkxCiAgICAvLyBtYnJfcGVyX3VuaXQgPSAyXzUwMCArICg0MDAgKiAoYSkpCiAgICBpbnRjXzMgLy8gNDAwCiAgICAqCiAgICBwdXNoaW50IDI1MDAgLy8gMjUwMAogICAgKwogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6OTQKICAgIC8vIHRvdGFsIDo9IGFzc2V0X3ByaWNlICogcXVhbnRpdHkgKyBtYnJfcGVyX3VuaXQgKiBxdWFudGl0eQogICAgc3dhcAogICAgZnJhbWVfZGlnIC0xCiAgICAqCiAgICBzd2FwCiAgICBmcmFtZV9kaWcgLTEKICAgICoKICAgICsKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjkzLTk0CiAgICAvLyBhc3NlcnQgdXNlcl9iYWxhbmNlID49ICgKICAgIC8vICAgICB0b3RhbCA6PSBhc3NldF9wcmljZSAqIHF1YW50aXR5ICsgbWJyX3Blcl91bml0ICogcXVhbnRpdHkKICAgIGR1cDIKICAgID49CiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weTo5My05NQogICAgLy8gYXNzZXJ0IHVzZXJfYmFsYW5jZSA+PSAoCiAgICAvLyAgICAgdG90YWwgOj0gYXNzZXRfcHJpY2UgKiBxdWFudGl0eSArIG1icl9wZXJfdW5pdCAqIHF1YW50aXR5CiAgICAvLyApLCAiSW5zdWZmaWNpZW50IGZ1bmRzIgogICAgYXNzZXJ0IC8vIEluc3VmZmljaWVudCBmdW5kcwogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6OTctOTgKICAgIC8vICMgVXBkYXRlIHVzZXIgYmFsYW5jZQogICAgLy8gc2VsZi51c2VyW1R4bi5zZW5kZXJdLmJhbGFuY2UgPSBhcmM0LlVJbnQ2NCh1c2VyX2JhbGFuY2UgLSB0b3RhbCkKICAgIC0KICAgIGl0b2IKICAgIGJ5dGVjXzAgLy8gInVzZXIiCiAgICB0eG4gU2VuZGVyCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudXNlciBlbnRyeSBleGlzdHMKICAgIHVuY292ZXIgMgogICAgcmVwbGFjZTIgMTAKICAgIGRpZyAxCiAgICBib3hfZGVsCiAgICBwb3AKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjEwMC0xMDEKICAgIC8vICMgSW5zZXJ0IG9yIHVwZGF0ZSB1c2VyLWFzc2V0IGJveAogICAgLy8gdXNlcl9hc3NldF9pZCA9IG9wLnNoYTI1NihUeG4uc2VuZGVyLmJ5dGVzICsgYXNzZXRfaWQpCiAgICB0eG4gU2VuZGVyCiAgICBmcmFtZV9kaWcgLTIKICAgIGNvbmNhdAogICAgc2hhMjU2CiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weToxMDIKICAgIC8vIGlmIHVzZXJfYXNzZXRfaWQgaW4gc2VsZi51c2VyX2Fzc2V0OgogICAgYnl0ZWNfMyAvLyAidXNlcl9hc3NldCIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZHVwCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGJ6IGJ1eV9hc3NldF9lbHNlX2JvZHlAMgogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MTAzCiAgICAvLyBzZWxmLnVzZXJfYXNzZXRbdXNlcl9hc3NldF9pZF0gKz0gcXVhbnRpdHkKICAgIGR1cAogICAgYm94X2dldAogICAgc3dhcAogICAgYnRvaQogICAgc3dhcAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudXNlcl9hc3NldCBlbnRyeSBleGlzdHMKICAgIGZyYW1lX2RpZyAtMQogICAgKwogICAgaXRvYgogICAgYm94X3B1dAogICAgYiBidXlfYXNzZXRfYWZ0ZXJfaWZfZWxzZUAzCgpidXlfYXNzZXRfZWxzZV9ib2R5QDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weToxMDUKICAgIC8vIHNlbGYudXNlcl9hc3NldFt1c2VyX2Fzc2V0X2lkXSA9IHF1YW50aXR5CiAgICBmcmFtZV9kaWcgLTEKICAgIGl0b2IKICAgIGJveF9wdXQKCmJ1eV9hc3NldF9hZnRlcl9pZl9lbHNlQDM6CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuZ2FtZS5jb250cmFjdC5HYW1lLmFkbWluX3Vwc2VydF9hc3NldChhc3NldDogYnl0ZXMpIC0+IHZvaWQ6CmFkbWluX3Vwc2VydF9hc3NldDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjEwNy0xMDgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGFkbWluX3Vwc2VydF9hc3NldChzZWxmLCBhc3NldDogR2FtZUFzc2V0KSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weToxMTUKICAgIC8vIFR4bi5zZW5kZXIgPT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcwogICAgdHhuIFNlbmRlcgogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICA9PQogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MTE0LTExNgogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBUeG4uc2VuZGVyID09IEdsb2JhbC5jcmVhdG9yX2FkZHJlc3MKICAgIC8vICksICJPbmx5IHRoZSBjcmVhdG9yIGNhbiBjYWxsIHRoaXMgbWV0aG9kIgogICAgYXNzZXJ0IC8vIE9ubHkgdGhlIGNyZWF0b3IgY2FuIGNhbGwgdGhpcyBtZXRob2QKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjExNwogICAgLy8gc2VsZi5hc3NldFtvcC5zaGEyNTYoYXNzZXQubmFtZS5ieXRlcyldID0gYXNzZXQuY29weSgpCiAgICBmcmFtZV9kaWcgLTEKICAgIGludGNfMSAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgZnJhbWVfZGlnIC0xCiAgICBwdXNoaW50IDIgLy8gMgogICAgZXh0cmFjdF91aW50MTYKICAgIGZyYW1lX2RpZyAtMQogICAgY292ZXIgMgogICAgc3Vic3RyaW5nMwogICAgc2hhMjU2CiAgICBieXRlY18xIC8vICJhc3NldCIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZHVwCiAgICBib3hfZGVsCiAgICBwb3AKICAgIGZyYW1lX2RpZyAtMQogICAgYm94X3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmdhbWUuY29udHJhY3QuR2FtZS5zZWxsYmFja19hc3NldChhc3NldF9pZDogYnl0ZXMsIHF1YW50aXR5OiB1aW50NjQpIC0+IHZvaWQ6CnNlbGxiYWNrX2Fzc2V0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MTE5LTEyMAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgc2VsbGJhY2tfYXNzZXQoc2VsZiwgYXNzZXRfaWQ6IEhhc2gsIHF1YW50aXR5OiBRdWFudGl0eSkgLT4gTm9uZToKICAgIHByb3RvIDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MTI3CiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciBpbiBzZWxmLnVzZXIsICJVc2VyIG11c3QgYmUgcmVnaXN0ZXJlZCIKICAgIGJ5dGVjXzAgLy8gInVzZXIiCiAgICB0eG4gU2VuZGVyCiAgICBjb25jYXQKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIFVzZXIgbXVzdCBiZSByZWdpc3RlcmVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weToxMjgKICAgIC8vIGFzc2VydCBhc3NldF9pZCBpbiBzZWxmLmFzc2V0LCAiSW52YWxpZCBhc3NldCBJRCIKICAgIGJ5dGVjXzEgLy8gImFzc2V0IgogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gSW52YWxpZCBhc3NldCBJRAogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MTMwCiAgICAvLyB1c2VyX2JhbGFuY2UgPSBzZWxmLnVzZXJbVHhuLnNlbmRlcl0uYmFsYW5jZS5uYXRpdmUKICAgIGJ5dGVjXzAgLy8gInVzZXIiCiAgICB0eG4gU2VuZGVyCiAgICBjb25jYXQKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnVzZXIgZW50cnkgZXhpc3RzCiAgICBleHRyYWN0IDEwIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBzd2FwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weToxMzEKICAgIC8vIGFzc2V0X3ByaWNlID0gc2VsZi5hc3NldFthc3NldF9pZF0ucHJpY2UubmF0aXZlCiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFzc2V0IGVudHJ5IGV4aXN0cwogICAgZXh0cmFjdCA0IDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBzd2FwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weToxMzMKICAgIC8vIGEgPSAoOCArIHNlbGYuYXNzZXRbYXNzZXRfaWRdLmJ5dGVzLmxlbmd0aCkgKiBxdWFudGl0eQogICAgYm94X2xlbgogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYXNzZXQgZW50cnkgZXhpc3RzCiAgICBpbnRjXzIgLy8gOAogICAgKwogICAgZnJhbWVfZGlnIC0xCiAgICAqCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weToxMzQKICAgIC8vIG1iciA9IDJfNTAwICsgKDQwMCAqIChhKSkKICAgIGludGNfMyAvLyA0MDAKICAgICoKICAgIHB1c2hpbnQgMjUwMCAvLyAyNTAwCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weToxMzYKICAgIC8vIHVzZXJfYXNzZXRfaWQgPSBvcC5zaGEyNTYoVHhuLnNlbmRlci5ieXRlcyArIGFzc2V0X2lkKQogICAgdHhuIFNlbmRlcgogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIHNoYTI1NgogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MTM3CiAgICAvLyBhc3NlcnQgdXNlcl9hc3NldF9pZCBpbiBzZWxmLnVzZXJfYXNzZXQsICJObyBhc3NldHMgZm91bmQiCiAgICBieXRlY18zIC8vICJ1c2VyX2Fzc2V0IgogICAgc3dhcAogICAgY29uY2F0CiAgICBkdXBuIDIKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIE5vIGFzc2V0cyBmb3VuZAogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MTM5CiAgICAvLyBzZWxmLnVzZXJfYXNzZXRbdXNlcl9hc3NldF9pZF0gPj0gcXVhbnRpdHkKICAgIGR1cAogICAgYm94X2dldAogICAgc3dhcAogICAgYnRvaQogICAgc3dhcAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudXNlcl9hc3NldCBlbnRyeSBleGlzdHMKICAgIGZyYW1lX2RpZyAtMQogICAgPj0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjEzOC0xNDAKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgc2VsZi51c2VyX2Fzc2V0W3VzZXJfYXNzZXRfaWRdID49IHF1YW50aXR5CiAgICAvLyApLCAiSW5zdWZmaWNpZW50IGFtb3VudCBvZiBhc3NldHMiCiAgICBhc3NlcnQgLy8gSW5zdWZmaWNpZW50IGFtb3VudCBvZiBhc3NldHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjE0Mi0xNDMKICAgIC8vICMgdXBkYXRlIG9yIHJlbW92ZSB1c2VyLWFzc2V0IGJveAogICAgLy8gc2VsZi51c2VyX2Fzc2V0W3VzZXJfYXNzZXRfaWRdIC09IHF1YW50aXR5CiAgICBkdXAKICAgIGJveF9nZXQKICAgIHN3YXAKICAgIGJ0b2kKICAgIHN3YXAKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnVzZXJfYXNzZXQgZW50cnkgZXhpc3RzCiAgICBmcmFtZV9kaWcgLTEKICAgIC0KICAgIGl0b2IKICAgIGRpZyAxCiAgICBzd2FwCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weToxNDQKICAgIC8vIGlmIHNlbGYudXNlcl9hc3NldFt1c2VyX2Fzc2V0X2lkXSA9PSAwOgogICAgYm94X2dldAogICAgc3dhcAogICAgYnRvaQogICAgc3dhcAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudXNlcl9hc3NldCBlbnRyeSBleGlzdHMKICAgIGJueiBzZWxsYmFja19hc3NldF9hZnRlcl9pZl9lbHNlQDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjE0NQogICAgLy8gZGVsIHNlbGYudXNlcl9hc3NldFt1c2VyX2Fzc2V0X2lkXQogICAgZnJhbWVfZGlnIDMKICAgIGJveF9kZWwKICAgIHBvcAoKc2VsbGJhY2tfYXNzZXRfYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MTQ5CiAgICAvLyB1c2VyX2JhbGFuY2UgKyAoYXNzZXRfcHJpY2UgKiBxdWFudGl0eSkgKyBtYnIKICAgIGZyYW1lX2RpZyAxCiAgICBmcmFtZV9kaWcgLTEKICAgICoKICAgIGZyYW1lX2RpZyAwCiAgICArCiAgICBmcmFtZV9kaWcgMgogICAgKwogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MTQ3LTE1MAogICAgLy8gIyBVcGRhdGUgdXNlciBiYWxhbmNlCiAgICAvLyBzZWxmLnVzZXJbVHhuLnNlbmRlcl0uYmFsYW5jZSA9IGFyYzQuVUludDY0KAogICAgLy8gICAgIHVzZXJfYmFsYW5jZSArIChhc3NldF9wcmljZSAqIHF1YW50aXR5KSArIG1icgogICAgLy8gKQogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MTQ3LTE0OAogICAgLy8gIyBVcGRhdGUgdXNlciBiYWxhbmNlCiAgICAvLyBzZWxmLnVzZXJbVHhuLnNlbmRlcl0uYmFsYW5jZSA9IGFyYzQuVUludDY0KAogICAgYnl0ZWNfMCAvLyAidXNlciIKICAgIHR4biBTZW5kZXIKICAgIGNvbmNhdAogICAgZHVwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi51c2VyIGVudHJ5IGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MTQ3LTE1MAogICAgLy8gIyBVcGRhdGUgdXNlciBiYWxhbmNlCiAgICAvLyBzZWxmLnVzZXJbVHhuLnNlbmRlcl0uYmFsYW5jZSA9IGFyYzQuVUludDY0KAogICAgLy8gICAgIHVzZXJfYmFsYW5jZSArIChhc3NldF9wcmljZSAqIHF1YW50aXR5KSArIG1icgogICAgLy8gKQogICAgdW5jb3ZlciAyCiAgICByZXBsYWNlMiAxMAogICAgZGlnIDEKICAgIGJveF9kZWwKICAgIHBvcAogICAgYm94X3B1dAogICAgcmV0c3ViCg==",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuZ2FtZS5jb250cmFjdC5HYW1lLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {},
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Game",
        "methods": [
            {
                "name": "register",
                "args": [
                    {
                        "type": "string",
                        "name": "name",
                        "desc": "The user's name."
                    }
                ],
                "returns": {
                    "type": "(uint64,string,uint64)",
                    "desc": "The user's profile information."
                },
                "desc": "Registers a user and returns their profile information."
            },
            {
                "name": "fund_account",
                "args": [
                    {
                        "type": "pay",
                        "name": "payment",
                        "desc": "The payment transaction."
                    }
                ],
                "returns": {
                    "type": "uint64",
                    "desc": "The user's updated balance."
                },
                "desc": "Funds a user's account."
            },
            {
                "name": "buy_asset",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "asset_id",
                        "desc": "The hash of the asset name."
                    },
                    {
                        "type": "uint64",
                        "name": "quantity",
                        "desc": "The quantity to purchase."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Buys a game asset."
            },
            {
                "name": "admin_upsert_asset",
                "args": [
                    {
                        "type": "(string,string,uint64)",
                        "name": "asset",
                        "desc": "The game asset information."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Updates or inserts a game asset."
            },
            {
                "name": "sellback_asset",
                "args": [
                    {
                        "type": "byte[]",
                        "name": "asset_id",
                        "desc": "The hash of the asset name."
                    },
                    {
                        "type": "uint64",
                        "name": "quantity",
                        "desc": "The quantity to purchase."
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Sell back a game asset to the application."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}"""
APP_SPEC = algokit_utils.ApplicationSpecification.from_json(_APP_SPEC_JSON)
_TReturn = typing.TypeVar("_TReturn")


class _ArgsBase(ABC, typing.Generic[_TReturn]):
    @staticmethod
    @abstractmethod
    def method() -> str:
        ...


_TArgs = typing.TypeVar("_TArgs", bound=_ArgsBase[typing.Any])


@dataclasses.dataclass(kw_only=True)
class _TArgsHolder(typing.Generic[_TArgs]):
    args: _TArgs


def _filter_none(value: dict | typing.Any) -> dict | typing.Any:
    if isinstance(value, dict):
        return {k: _filter_none(v) for k, v in value.items() if v is not None}
    return value


def _as_dict(data: typing.Any, *, convert_all: bool = True) -> dict[str, typing.Any]:
    if data is None:
        return {}
    if not dataclasses.is_dataclass(data):
        raise TypeError(f"{data} must be a dataclass")
    if convert_all:
        result = dataclasses.asdict(data) # type: ignore[call-overload]
    else:
        result = {f.name: getattr(data, f.name) for f in dataclasses.fields(data)}
    return _filter_none(result)


def _convert_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.TransactionParametersDict:
    return typing.cast(algokit_utils.TransactionParametersDict, _as_dict(transaction_parameters))


def _convert_call_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
) -> algokit_utils.OnCompleteCallParametersDict:
    return typing.cast(algokit_utils.OnCompleteCallParametersDict, _as_dict(transaction_parameters))


def _convert_create_transaction_parameters(
    transaction_parameters: algokit_utils.TransactionParameters | None,
    on_complete: algokit_utils.OnCompleteActionName,
) -> algokit_utils.CreateCallParametersDict:
    result = typing.cast(algokit_utils.CreateCallParametersDict, _as_dict(transaction_parameters))
    on_complete_enum = on_complete.replace("_", " ").title().replace(" ", "") + "OC"
    result["on_complete"] = getattr(algosdk.transaction.OnComplete, on_complete_enum)
    return result


def _convert_deploy_args(
    deploy_args: algokit_utils.DeployCallArgs | None,
) -> algokit_utils.ABICreateCallArgsDict | None:
    if deploy_args is None:
        return None

    deploy_args_dict = typing.cast(algokit_utils.ABICreateCallArgsDict, _as_dict(deploy_args))
    if isinstance(deploy_args, _TArgsHolder):
        deploy_args_dict["args"] = _as_dict(deploy_args.args)
        deploy_args_dict["method"] = deploy_args.args.method()

    return deploy_args_dict


@dataclasses.dataclass(kw_only=True)
class User:
    registered_at: int
    name: str
    balance: int


@dataclasses.dataclass(kw_only=True)
class RegisterArgs(_ArgsBase[User]):
    """Registers a user and returns their profile information."""

    name: str
    """The user's name."""

    @staticmethod
    def method() -> str:
        return "register(string)(uint64,string,uint64)"


@dataclasses.dataclass(kw_only=True)
class FundAccountArgs(_ArgsBase[int]):
    """Funds a user's account."""

    payment: TransactionWithSigner
    """The payment transaction."""

    @staticmethod
    def method() -> str:
        return "fund_account(pay)uint64"


@dataclasses.dataclass(kw_only=True)
class BuyAssetArgs(_ArgsBase[None]):
    """Buys a game asset."""

    asset_id: bytes | bytearray
    """The hash of the asset name."""
    quantity: int
    """The quantity to purchase."""

    @staticmethod
    def method() -> str:
        return "buy_asset(byte[],uint64)void"


@dataclasses.dataclass(kw_only=True)
class GameAsset:
    name: str
    description: str
    price: int


@dataclasses.dataclass(kw_only=True)
class AdminUpsertAssetArgs(_ArgsBase[None]):
    """Updates or inserts a game asset."""

    asset: GameAsset
    """The game asset information."""

    @staticmethod
    def method() -> str:
        return "admin_upsert_asset((string,string,uint64))void"


@dataclasses.dataclass(kw_only=True)
class SellbackAssetArgs(_ArgsBase[None]):
    """Sell back a game asset to the application."""

    asset_id: bytes | bytearray
    """The hash of the asset name."""
    quantity: int
    """The quantity to purchase."""

    @staticmethod
    def method() -> str:
        return "sellback_asset(byte[],uint64)void"


@dataclasses.dataclass(kw_only=True)
class SimulateOptions:
    allow_more_logs: bool = dataclasses.field(default=False)
    allow_empty_signatures: bool = dataclasses.field(default=False)
    extra_opcode_budget: int = dataclasses.field(default=0)
    exec_trace_config: models.SimulateTraceConfig | None         = dataclasses.field(default=None)


class Composer:

    def __init__(self, app_client: algokit_utils.ApplicationClient, atc: AtomicTransactionComposer):
        self.app_client = app_client
        self.atc = atc

    def build(self) -> AtomicTransactionComposer:
        return self.atc

    def simulate(self, options: SimulateOptions | None = None) -> SimulateAtomicTransactionResponse:
        request = models.SimulateRequest(
            allow_more_logs=options.allow_more_logs,
            allow_empty_signatures=options.allow_empty_signatures,
            extra_opcode_budget=options.extra_opcode_budget,
            exec_trace_config=options.exec_trace_config,
            txn_groups=[]
        ) if options else None
        result = self.atc.simulate(self.app_client.algod_client, request)
        return result

    def execute(self) -> AtomicTransactionResponse:
        return self.app_client.execute_atc(self.atc)

    def register(
        self,
        *,
        name: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Registers a user and returns their profile information.
        
        Adds a call to `register(string)(uint64,string,uint64)` ABI method
        
        :param str name: The user's name.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = RegisterArgs(
            name=name,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def fund_account(
        self,
        *,
        payment: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Funds a user's account.
        
        Adds a call to `fund_account(pay)uint64` ABI method
        
        :param TransactionWithSigner payment: The payment transaction.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = FundAccountArgs(
            payment=payment,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def buy_asset(
        self,
        *,
        asset_id: bytes | bytearray,
        quantity: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Buys a game asset.
        
        Adds a call to `buy_asset(byte[],uint64)void` ABI method
        
        :param bytes | bytearray asset_id: The hash of the asset name.
        :param int quantity: The quantity to purchase.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = BuyAssetArgs(
            asset_id=asset_id,
            quantity=quantity,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def admin_upsert_asset(
        self,
        *,
        asset: GameAsset,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Updates or inserts a game asset.
        
        Adds a call to `admin_upsert_asset((string,string,uint64))void` ABI method
        
        :param GameAsset asset: The game asset information.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = AdminUpsertAssetArgs(
            asset=asset,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def sellback_asset(
        self,
        *,
        asset_id: bytes | bytearray,
        quantity: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> "Composer":
        """Sell back a game asset to the application.
        
        Adds a call to `sellback_asset(byte[],uint64)void` ABI method
        
        :param bytes | bytearray asset_id: The hash of the asset name.
        :param int quantity: The quantity to purchase.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        args = SellbackAssetArgs(
            asset_id=asset_id,
            quantity=quantity,
        )
        self.app_client.compose_call(
            self.atc,
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return self

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> "Composer":
        """Adds a call to create an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns Composer: This Composer instance"""

        self.app_client.compose_create(
            self.atc,
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return self

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> "Composer":
        """Adds a call to the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass"""
    
        self.app_client.compose_clear_state(self.atc, _convert_transaction_parameters(transaction_parameters), app_args)
        return self


class GameClient:
    """A class for interacting with the Game app providing high productivity and
    strongly typed methods to deploy and call the app"""

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    @typing.overload
    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        ...

    def __init__(
        self,
        algod_client: algosdk.v2client.algod.AlgodClient,
        *,
        creator: str | algokit_utils.Account | None = None,
        indexer_client: algosdk.v2client.indexer.IndexerClient | None = None,
        existing_deployments: algokit_utils.AppLookup | None = None,
        app_id: int = 0,
        signer: TransactionSigner | algokit_utils.Account | None = None,
        sender: str | None = None,
        suggested_params: algosdk.transaction.SuggestedParams | None = None,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        app_name: str | None = None,
    ) -> None:
        """
        GameClient can be created with an app_id to interact with an existing application, alternatively
        it can be created with a creator and indexer_client specified to find existing applications by name and creator.
        
        :param AlgodClient algod_client: AlgoSDK algod client
        :param int app_id: The app_id of an existing application, to instead find the application by creator and name
        use the creator and indexer_client parameters
        :param str | Account creator: The address or Account of the app creator to resolve the app_id
        :param IndexerClient indexer_client: AlgoSDK indexer client, only required if deploying or finding app_id by
        creator and app name
        :param AppLookup existing_deployments:
        :param TransactionSigner | Account signer: Account or signer to use to sign transactions, if not specified and
        creator was passed as an Account will use that.
        :param str sender: Address to use as the sender for all transactions, will use the address associated with the
        signer if not specified.
        :param TemplateValueMapping template_values: Values to use for TMPL_* template variables, dictionary keys should
        *NOT* include the TMPL_ prefix
        :param str | None app_name: Name of application to use when deploying, defaults to name defined on the
        Application Specification
            """

        self.app_spec = APP_SPEC
        
        # calling full __init__ signature, so ignoring mypy warning about overloads
        self.app_client = algokit_utils.ApplicationClient(  # type: ignore[call-overload, misc]
            algod_client=algod_client,
            app_spec=self.app_spec,
            app_id=app_id,
            creator=creator,
            indexer_client=indexer_client,
            existing_deployments=existing_deployments,
            signer=signer,
            sender=sender,
            suggested_params=suggested_params,
            template_values=template_values,
            app_name=app_name,
        )

    @property
    def algod_client(self) -> algosdk.v2client.algod.AlgodClient:
        return self.app_client.algod_client

    @property
    def app_id(self) -> int:
        return self.app_client.app_id

    @app_id.setter
    def app_id(self, value: int) -> None:
        self.app_client.app_id = value

    @property
    def app_address(self) -> str:
        return self.app_client.app_address

    @property
    def sender(self) -> str | None:
        return self.app_client.sender

    @sender.setter
    def sender(self, value: str) -> None:
        self.app_client.sender = value

    @property
    def signer(self) -> TransactionSigner | None:
        return self.app_client.signer

    @signer.setter
    def signer(self, value: TransactionSigner) -> None:
        self.app_client.signer = value

    @property
    def suggested_params(self) -> algosdk.transaction.SuggestedParams | None:
        return self.app_client.suggested_params

    @suggested_params.setter
    def suggested_params(self, value: algosdk.transaction.SuggestedParams | None) -> None:
        self.app_client.suggested_params = value

    def register(
        self,
        *,
        name: str,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[User]:
        """Registers a user and returns their profile information.
        
        Calls `register(string)(uint64,string,uint64)` ABI method
        
        :param str name: The user's name.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[User]: The user's profile information."""

        args = RegisterArgs(
            name=name,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        elements = self.app_spec.hints[args.method()].structs["output"]["elements"]
        result_dict = {element[0]: value for element, value in zip(elements, result.return_value)}
        result.return_value = User(**result_dict)
        return result

    def fund_account(
        self,
        *,
        payment: TransactionWithSigner,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[int]:
        """Funds a user's account.
        
        Calls `fund_account(pay)uint64` ABI method
        
        :param TransactionWithSigner payment: The payment transaction.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[int]: The user's updated balance."""

        args = FundAccountArgs(
            payment=payment,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def buy_asset(
        self,
        *,
        asset_id: bytes | bytearray,
        quantity: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Buys a game asset.
        
        Calls `buy_asset(byte[],uint64)void` ABI method
        
        :param bytes | bytearray asset_id: The hash of the asset name.
        :param int quantity: The quantity to purchase.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = BuyAssetArgs(
            asset_id=asset_id,
            quantity=quantity,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def admin_upsert_asset(
        self,
        *,
        asset: GameAsset,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Updates or inserts a game asset.
        
        Calls `admin_upsert_asset((string,string,uint64))void` ABI method
        
        :param GameAsset asset: The game asset information.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = AdminUpsertAssetArgs(
            asset=asset,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def sellback_asset(
        self,
        *,
        asset_id: bytes | bytearray,
        quantity: int,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
    ) -> algokit_utils.ABITransactionResponse[None]:
        """Sell back a game asset to the application.
        
        Calls `sellback_asset(byte[],uint64)void` ABI method
        
        :param bytes | bytearray asset_id: The hash of the asset name.
        :param int quantity: The quantity to purchase.
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.ABITransactionResponse[None]: The result of the transaction"""

        args = SellbackAssetArgs(
            asset_id=asset_id,
            quantity=quantity,
        )
        result = self.app_client.call(
            call_abi_method=args.method(),
            transaction_parameters=_convert_call_transaction_parameters(transaction_parameters),
            **_as_dict(args, convert_all=True),
        )
        return result

    def create_bare(
        self,
        *,
        on_complete: typing.Literal["no_op"] = "no_op",
        transaction_parameters: algokit_utils.CreateTransactionParameters | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Creates an application using the no_op bare method
        
        :param typing.Literal[no_op] on_complete: On completion type to use
        :param algokit_utils.CreateTransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :returns algokit_utils.TransactionResponse: The result of the transaction"""

        result = self.app_client.create(
            call_abi_method=False,
            transaction_parameters=_convert_create_transaction_parameters(transaction_parameters, on_complete),
        )
        return result

    def clear_state(
        self,
        transaction_parameters: algokit_utils.TransactionParameters | None = None,
        app_args: list[bytes] | None = None,
    ) -> algokit_utils.TransactionResponse:
        """Calls the application with on completion set to ClearState
    
        :param algokit_utils.TransactionParameters transaction_parameters: (optional) Additional transaction parameters
        :param list[bytes] | None app_args: (optional) Application args to pass
        :returns algokit_utils.TransactionResponse: The result of the transaction"""
    
        return self.app_client.clear_state(_convert_transaction_parameters(transaction_parameters), app_args)

    def deploy(
        self,
        version: str | None = None,
        *,
        signer: TransactionSigner | None = None,
        sender: str | None = None,
        allow_update: bool | None = None,
        allow_delete: bool | None = None,
        on_update: algokit_utils.OnUpdate = algokit_utils.OnUpdate.Fail,
        on_schema_break: algokit_utils.OnSchemaBreak = algokit_utils.OnSchemaBreak.Fail,
        template_values: algokit_utils.TemplateValueMapping | None = None,
        create_args: algokit_utils.DeployCallArgs | None = None,
        update_args: algokit_utils.DeployCallArgs | None = None,
        delete_args: algokit_utils.DeployCallArgs | None = None,
    ) -> algokit_utils.DeployResponse:
        """Deploy an application and update client to reference it.
        
        Idempotently deploy (create, update/delete if changed) an app against the given name via the given creator
        account, including deploy-time template placeholder substitutions.
        To understand the architecture decisions behind this functionality please see
        <https://github.com/algorandfoundation/algokit-cli/blob/main/docs/architecture-decisions/2023-01-12_smart-contract-deployment.md>
        
        ```{note}
        If there is a breaking state schema change to an existing app (and `on_schema_break` is set to
        'ReplaceApp' the existing app will be deleted and re-created.
        ```
        
        ```{note}
        If there is an update (different TEAL code) to an existing app (and `on_update` is set to 'ReplaceApp')
        the existing app will be deleted and re-created.
        ```
        
        :param str version: version to use when creating or updating app, if None version will be auto incremented
        :param algosdk.atomic_transaction_composer.TransactionSigner signer: signer to use when deploying app
        , if None uses self.signer
        :param str sender: sender address to use when deploying app, if None uses self.sender
        :param bool allow_delete: Used to set the `TMPL_DELETABLE` template variable to conditionally control if an app
        can be deleted
        :param bool allow_update: Used to set the `TMPL_UPDATABLE` template variable to conditionally control if an app
        can be updated
        :param OnUpdate on_update: Determines what action to take if an application update is required
        :param OnSchemaBreak on_schema_break: Determines what action to take if an application schema requirements
        has increased beyond the current allocation
        :param dict[str, int|str|bytes] template_values: Values to use for `TMPL_*` template variables, dictionary keys
        should *NOT* include the TMPL_ prefix
        :param algokit_utils.DeployCallArgs | None create_args: Arguments used when creating an application
        :param algokit_utils.DeployCallArgs | None update_args: Arguments used when updating an application
        :param algokit_utils.DeployCallArgs | None delete_args: Arguments used when deleting an application
        :return DeployResponse: details action taken and relevant transactions
        :raises DeploymentError: If the deployment failed"""

        return self.app_client.deploy(
            version,
            signer=signer,
            sender=sender,
            allow_update=allow_update,
            allow_delete=allow_delete,
            on_update=on_update,
            on_schema_break=on_schema_break,
            template_values=template_values,
            create_args=_convert_deploy_args(create_args),
            update_args=_convert_deploy_args(update_args),
            delete_args=_convert_deploy_args(delete_args),
        )

    def compose(self, atc: AtomicTransactionComposer | None = None) -> Composer:
        return Composer(self.app_client, atc or AtomicTransactionComposer())
