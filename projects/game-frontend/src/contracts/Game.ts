/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"Game","structs":{"User":[{"name":"registeredAt","type":"uint64"},{"name":"name","type":"string"},{"name":"balance","type":"uint64"}],"GameAsset":[{"name":"name","type":"string"},{"name":"description","type":"string"},{"name":"price","type":"uint64"}]},"methods":[{"name":"register","desc":"Registers a user and returns their profile information.","args":[{"name":"name","type":"string","desc":"The user's name."}],"returns":{"type":"(uint64,string,uint64)","desc":"The user's profile information.","struct":"User"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"fund_account","desc":"Funds a user's account.","args":[{"name":"payment","type":"pay","desc":"The payment transaction."}],"returns":{"type":"uint64","desc":"The user's updated balance."},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"buy_asset","desc":"Buys a game asset.","args":[{"name":"asset_id","type":"byte[]","desc":"The hash of the asset name."},{"name":"quantity","type":"uint64","desc":"The quantity to purchase."}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"admin_upsert_asset","desc":"Updates or inserts a game asset.","args":[{"name":"asset","type":"(string,string,uint64)","desc":"The game asset information.","struct":"GameAsset"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"sellback_asset","desc":"Sell back a game asset to the application.","args":[{"name":"asset_id","type":"byte[]","desc":"The hash of the asset name."},{"name":"quantity","type":"uint64","desc":"The quantity to purchase."}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}}],"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuZ2FtZS5jb250cmFjdC5HYW1lLmFwcHJvdmFsX3Byb2dyYW06CiAgICBpbnRjYmxvY2sgMSAwIDggNDAwCiAgICBieXRlY2Jsb2NrICJ1c2VyIiAiYXNzZXQiIDB4MTUxZjdjNzUgInVzZXJfYXNzZXQiCiAgICBjYWxsc3ViIF9fcHV5YV9hcmM0X3JvdXRlcl9fCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMuZ2FtZS5jb250cmFjdC5HYW1lLl9fcHV5YV9hcmM0X3JvdXRlcl9fKCkgLT4gdWludDY0OgpfX3B1eWFfYXJjNF9yb3V0ZXJfXzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjMyCiAgICAvLyBjbGFzcyBHYW1lKEFSQzRDb250cmFjdCk6CiAgICBwcm90byAwIDEKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBfX3B1eWFfYXJjNF9yb3V0ZXJfX19iYXJlX3JvdXRpbmdAOQogICAgcHVzaGJ5dGVzcyAweDE0MzFmODU2IDB4ZWM0NzZkYmQgMHg4MjhmMzBkMyAweDY5ZjVjODYzIDB4ZTYxODM3ZGMgLy8gbWV0aG9kICJyZWdpc3RlcihzdHJpbmcpKHVpbnQ2NCxzdHJpbmcsdWludDY0KSIsIG1ldGhvZCAiZnVuZF9hY2NvdW50KHBheSl1aW50NjQiLCBtZXRob2QgImJ1eV9hc3NldChieXRlW10sdWludDY0KXZvaWQiLCBtZXRob2QgImFkbWluX3Vwc2VydF9hc3NldCgoc3RyaW5nLHN0cmluZyx1aW50NjQpKXZvaWQiLCBtZXRob2QgInNlbGxiYWNrX2Fzc2V0KGJ5dGVbXSx1aW50NjQpdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIF9fcHV5YV9hcmM0X3JvdXRlcl9fX3JlZ2lzdGVyX3JvdXRlQDIgX19wdXlhX2FyYzRfcm91dGVyX19fZnVuZF9hY2NvdW50X3JvdXRlQDMgX19wdXlhX2FyYzRfcm91dGVyX19fYnV5X2Fzc2V0X3JvdXRlQDQgX19wdXlhX2FyYzRfcm91dGVyX19fYWRtaW5fdXBzZXJ0X2Fzc2V0X3JvdXRlQDUgX19wdXlhX2FyYzRfcm91dGVyX19fc2VsbGJhY2tfYXNzZXRfcm91dGVANgogICAgaW50Y18xIC8vIDAKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19fcmVnaXN0ZXJfcm91dGVAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjM4CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MzIKICAgIC8vIGNsYXNzIEdhbWUoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjM4CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgcmVnaXN0ZXIKICAgIGJ5dGVjXzIgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX2Z1bmRfYWNjb3VudF9yb3V0ZUAzOgogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6NTYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weTozMgogICAgLy8gY2xhc3MgR2FtZShBUkM0Q29udHJhY3QpOgogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludGNfMCAvLyAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weTo1NgogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIGZ1bmRfYWNjb3VudAogICAgYnl0ZWNfMiAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19fYnV5X2Fzc2V0X3JvdXRlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weTo3NgogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjMyCiAgICAvLyBjbGFzcyBHYW1lKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6NzYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBidXlfYXNzZXQKICAgIGludGNfMCAvLyAxCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX2FkbWluX3Vwc2VydF9hc3NldF9yb3V0ZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MTA3CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MzIKICAgIC8vIGNsYXNzIEdhbWUoQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjEwNwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIGFkbWluX3Vwc2VydF9hc3NldAogICAgaW50Y18wIC8vIDEKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19fc2VsbGJhY2tfYXNzZXRfcm91dGVANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjExOQogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjMyCiAgICAvLyBjbGFzcyBHYW1lKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MTE5CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIGNhbGxzdWIgc2VsbGJhY2tfYXNzZXQKICAgIGludGNfMCAvLyAxCiAgICByZXRzdWIKCl9fcHV5YV9hcmM0X3JvdXRlcl9fX2JhcmVfcm91dGluZ0A5OgogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MzIKICAgIC8vIGNsYXNzIEdhbWUoQVJDNENvbnRyYWN0KToKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGJueiBfX3B1eWFfYXJjNF9yb3V0ZXJfX19hZnRlcl9pZl9lbHNlQDEzCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgaW50Y18wIC8vIDEKICAgIHJldHN1YgoKX19wdXlhX2FyYzRfcm91dGVyX19fYWZ0ZXJfaWZfZWxzZUAxMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjMyCiAgICAvLyBjbGFzcyBHYW1lKEFSQzRDb250cmFjdCk6CiAgICBpbnRjXzEgLy8gMAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmdhbWUuY29udHJhY3QuR2FtZS5yZWdpc3RlcihuYW1lOiBieXRlcykgLT4gYnl0ZXM6CnJlZ2lzdGVyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MzgtMzkKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIHJlZ2lzdGVyKHNlbGYsIG5hbWU6IGFyYzQuU3RyaW5nKSAtPiBVc2VyOgogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weTo0OAogICAgLy8gaWYgVHhuLnNlbmRlciBub3QgaW4gc2VsZi51c2VyOgogICAgYnl0ZWNfMCAvLyAidXNlciIKICAgIHR4biBTZW5kZXIKICAgIGNvbmNhdAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBibnogcmVnaXN0ZXJfYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weTo1MAogICAgLy8gcmVnaXN0ZXJlZF9hdD1hcmM0LlVJbnQ2NChHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcCksCiAgICBnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weTo0OS01MwogICAgLy8gc2VsZi51c2VyW1R4bi5zZW5kZXJdID0gVXNlcigKICAgIC8vICAgICByZWdpc3RlcmVkX2F0PWFyYzQuVUludDY0KEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wKSwKICAgIC8vICAgICBuYW1lPW5hbWUsCiAgICAvLyAgICAgYmFsYW5jZT1hcmM0LlVJbnQ2NCgwKSwKICAgIC8vICkKICAgIHB1c2hieXRlcyAweDAwMTIKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6NTIKICAgIC8vIGJhbGFuY2U9YXJjNC5VSW50NjQoMCksCiAgICBwdXNoYnl0ZXMgMHgwMDAwMDAwMDAwMDAwMDAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weTo0OS01MwogICAgLy8gc2VsZi51c2VyW1R4bi5zZW5kZXJdID0gVXNlcigKICAgIC8vICAgICByZWdpc3RlcmVkX2F0PWFyYzQuVUludDY0KEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wKSwKICAgIC8vICAgICBuYW1lPW5hbWUsCiAgICAvLyAgICAgYmFsYW5jZT1hcmM0LlVJbnQ2NCgwKSwKICAgIC8vICkKICAgIGNvbmNhdAogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjQ5CiAgICAvLyBzZWxmLnVzZXJbVHhuLnNlbmRlcl0gPSBVc2VyKAogICAgYnl0ZWNfMCAvLyAidXNlciIKICAgIHR4biBTZW5kZXIKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6NDktNTMKICAgIC8vIHNlbGYudXNlcltUeG4uc2VuZGVyXSA9IFVzZXIoCiAgICAvLyAgICAgcmVnaXN0ZXJlZF9hdD1hcmM0LlVJbnQ2NChHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcCksCiAgICAvLyAgICAgbmFtZT1uYW1lLAogICAgLy8gICAgIGJhbGFuY2U9YXJjNC5VSW50NjQoMCksCiAgICAvLyApCiAgICBkdXAKICAgIGJveF9kZWwKICAgIHBvcAogICAgc3dhcAogICAgYm94X3B1dAoKcmVnaXN0ZXJfYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6NTQKICAgIC8vIHJldHVybiBzZWxmLnVzZXJbVHhuLnNlbmRlcl0KICAgIGJ5dGVjXzAgLy8gInVzZXIiCiAgICB0eG4gU2VuZGVyCiAgICBjb25jYXQKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnVzZXIgZW50cnkgZXhpc3RzCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuZ2FtZS5jb250cmFjdC5HYW1lLmZ1bmRfYWNjb3VudChwYXltZW50OiB1aW50NjQpIC0+IGJ5dGVzOgpmdW5kX2FjY291bnQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weTo1Ni01NwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgZnVuZF9hY2NvdW50KHNlbGYsIHBheW1lbnQ6IGd0eG4uUGF5bWVudFRyYW5zYWN0aW9uKSAtPiBhcmM0LlVJbnQ2NDoKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6NjcKICAgIC8vIHBheW1lbnQucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBSZWNlaXZlcgogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgID09CiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weTo2Ni02OAogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBwYXltZW50LnJlY2VpdmVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIC8vICksICJQYXltZW50IHJlY2VpdmVyIG11c3QgYmUgdGhlIGFwcGxpY2F0aW9uIGFkZHJlc3MiCiAgICBhc3NlcnQgLy8gUGF5bWVudCByZWNlaXZlciBtdXN0IGJlIHRoZSBhcHBsaWNhdGlvbiBhZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weTo2OQogICAgLy8gYXNzZXJ0IHBheW1lbnQuc2VuZGVyIGluIHNlbGYudXNlciwgIlVzZXIgbXVzdCBiZSByZWdpc3RlcmVkIgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBTZW5kZXIKICAgIGJ5dGVjXzAgLy8gInVzZXIiCiAgICBzd2FwCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gVXNlciBtdXN0IGJlIHJlZ2lzdGVyZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjcyCiAgICAvLyBzZWxmLnVzZXJbcGF5bWVudC5zZW5kZXJdLmJhbGFuY2UubmF0aXZlICsgcGF5bWVudC5hbW91bnQKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudXNlciBlbnRyeSBleGlzdHMKICAgIGV4dHJhY3QgMTAgOCAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGJ0b2kKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgQW1vdW50CiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weTo3MS03MwogICAgLy8gc2VsZi51c2VyW3BheW1lbnQuc2VuZGVyXS5iYWxhbmNlID0gYXJjNC5VSW50NjQoCiAgICAvLyAgICAgc2VsZi51c2VyW3BheW1lbnQuc2VuZGVyXS5iYWxhbmNlLm5hdGl2ZSArIHBheW1lbnQuYW1vdW50CiAgICAvLyApCiAgICBpdG9iCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weTo3MQogICAgLy8gc2VsZi51c2VyW3BheW1lbnQuc2VuZGVyXS5iYWxhbmNlID0gYXJjNC5VSW50NjQoCiAgICBkaWcgMQogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudXNlciBlbnRyeSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjcxLTczCiAgICAvLyBzZWxmLnVzZXJbcGF5bWVudC5zZW5kZXJdLmJhbGFuY2UgPSBhcmM0LlVJbnQ2NCgKICAgIC8vICAgICBzZWxmLnVzZXJbcGF5bWVudC5zZW5kZXJdLmJhbGFuY2UubmF0aXZlICsgcGF5bWVudC5hbW91bnQKICAgIC8vICkKICAgIHN3YXAKICAgIHJlcGxhY2UyIDEwCiAgICBkaWcgMQogICAgYm94X2RlbAogICAgcG9wCiAgICBkaWcgMQogICAgc3dhcAogICAgYm94X3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6NzQKICAgIC8vIHJldHVybiBzZWxmLnVzZXJbcGF5bWVudC5zZW5kZXJdLmJhbGFuY2UKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnVzZXIgZW50cnkgZXhpc3RzCiAgICBleHRyYWN0IDEwIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuZ2FtZS5jb250cmFjdC5HYW1lLmJ1eV9hc3NldChhc3NldF9pZDogYnl0ZXMsIHF1YW50aXR5OiB1aW50NjQpIC0+IHZvaWQ6CmJ1eV9hc3NldDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5Ojc2LTc3CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBidXlfYXNzZXQoc2VsZiwgYXNzZXRfaWQ6IEhhc2gsIHF1YW50aXR5OiBRdWFudGl0eSkgLT4gTm9uZToKICAgIHByb3RvIDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6ODQKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyIGluIHNlbGYudXNlciwgIlVzZXIgbXVzdCBiZSByZWdpc3RlcmVkIgogICAgYnl0ZWNfMCAvLyAidXNlciIKICAgIHR4biBTZW5kZXIKICAgIGNvbmNhdAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gVXNlciBtdXN0IGJlIHJlZ2lzdGVyZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5Ojg1CiAgICAvLyBhc3NlcnQgYXNzZXRfaWQgaW4gc2VsZi5hc3NldCwgIkludmFsaWQgYXNzZXQgSUQiCiAgICBieXRlY18xIC8vICJhc3NldCIKICAgIGZyYW1lX2RpZyAtMgogICAgY29uY2F0CiAgICBkdXAKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIEludmFsaWQgYXNzZXQgSUQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5Ojg3CiAgICAvLyB1c2VyX2JhbGFuY2UgPSBzZWxmLnVzZXJbVHhuLnNlbmRlcl0uYmFsYW5jZS5uYXRpdmUKICAgIGJ5dGVjXzAgLy8gInVzZXIiCiAgICB0eG4gU2VuZGVyCiAgICBjb25jYXQKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnVzZXIgZW50cnkgZXhpc3RzCiAgICBleHRyYWN0IDEwIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weTo4OAogICAgLy8gYXNzZXRfcHJpY2UgPSBzZWxmLmFzc2V0W2Fzc2V0X2lkXS5wcmljZS5uYXRpdmUKICAgIGRpZyAxCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5hc3NldCBlbnRyeSBleGlzdHMKICAgIGV4dHJhY3QgNCA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6OTAKICAgIC8vIGEgPSA4ICsgc2VsZi5hc3NldFthc3NldF9pZF0uYnl0ZXMubGVuZ3RoCiAgICB1bmNvdmVyIDIKICAgIGJveF9sZW4KICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFzc2V0IGVudHJ5IGV4aXN0cwogICAgaW50Y18yIC8vIDgKICAgICsKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjkxCiAgICAvLyBtYnJfcGVyX3VuaXQgPSAyXzUwMCArICg0MDAgKiAoYSkpCiAgICBpbnRjXzMgLy8gNDAwCiAgICAqCiAgICBwdXNoaW50IDI1MDAgLy8gMjUwMAogICAgKwogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6OTQKICAgIC8vIHRvdGFsIDo9IGFzc2V0X3ByaWNlICogcXVhbnRpdHkgKyBtYnJfcGVyX3VuaXQgKiBxdWFudGl0eQogICAgc3dhcAogICAgZnJhbWVfZGlnIC0xCiAgICAqCiAgICBzd2FwCiAgICBmcmFtZV9kaWcgLTEKICAgICoKICAgICsKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjkzLTk0CiAgICAvLyBhc3NlcnQgdXNlcl9iYWxhbmNlID49ICgKICAgIC8vICAgICB0b3RhbCA6PSBhc3NldF9wcmljZSAqIHF1YW50aXR5ICsgbWJyX3Blcl91bml0ICogcXVhbnRpdHkKICAgIGR1cDIKICAgID49CiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weTo5My05NQogICAgLy8gYXNzZXJ0IHVzZXJfYmFsYW5jZSA+PSAoCiAgICAvLyAgICAgdG90YWwgOj0gYXNzZXRfcHJpY2UgKiBxdWFudGl0eSArIG1icl9wZXJfdW5pdCAqIHF1YW50aXR5CiAgICAvLyApLCAiSW5zdWZmaWNpZW50IGZ1bmRzIgogICAgYXNzZXJ0IC8vIEluc3VmZmljaWVudCBmdW5kcwogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6OTctOTgKICAgIC8vICMgVXBkYXRlIHVzZXIgYmFsYW5jZQogICAgLy8gc2VsZi51c2VyW1R4bi5zZW5kZXJdLmJhbGFuY2UgPSBhcmM0LlVJbnQ2NCh1c2VyX2JhbGFuY2UgLSB0b3RhbCkKICAgIC0KICAgIGl0b2IKICAgIGJ5dGVjXzAgLy8gInVzZXIiCiAgICB0eG4gU2VuZGVyCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudXNlciBlbnRyeSBleGlzdHMKICAgIHVuY292ZXIgMgogICAgcmVwbGFjZTIgMTAKICAgIGRpZyAxCiAgICBib3hfZGVsCiAgICBwb3AKICAgIGJveF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjEwMC0xMDEKICAgIC8vICMgSW5zZXJ0IG9yIHVwZGF0ZSB1c2VyLWFzc2V0IGJveAogICAgLy8gdXNlcl9hc3NldF9pZCA9IG9wLnNoYTI1NihUeG4uc2VuZGVyLmJ5dGVzICsgYXNzZXRfaWQpCiAgICB0eG4gU2VuZGVyCiAgICBmcmFtZV9kaWcgLTIKICAgIGNvbmNhdAogICAgc2hhMjU2CiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weToxMDIKICAgIC8vIGlmIHVzZXJfYXNzZXRfaWQgaW4gc2VsZi51c2VyX2Fzc2V0OgogICAgYnl0ZWNfMyAvLyAidXNlcl9hc3NldCIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZHVwCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGJ6IGJ1eV9hc3NldF9lbHNlX2JvZHlAMgogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MTAzCiAgICAvLyBzZWxmLnVzZXJfYXNzZXRbdXNlcl9hc3NldF9pZF0gKz0gcXVhbnRpdHkKICAgIGR1cAogICAgYm94X2dldAogICAgc3dhcAogICAgYnRvaQogICAgc3dhcAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudXNlcl9hc3NldCBlbnRyeSBleGlzdHMKICAgIGZyYW1lX2RpZyAtMQogICAgKwogICAgaXRvYgogICAgYm94X3B1dAogICAgYiBidXlfYXNzZXRfYWZ0ZXJfaWZfZWxzZUAzCgpidXlfYXNzZXRfZWxzZV9ib2R5QDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weToxMDUKICAgIC8vIHNlbGYudXNlcl9hc3NldFt1c2VyX2Fzc2V0X2lkXSA9IHF1YW50aXR5CiAgICBmcmFtZV9kaWcgLTEKICAgIGl0b2IKICAgIGJveF9wdXQKCmJ1eV9hc3NldF9hZnRlcl9pZl9lbHNlQDM6CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuZ2FtZS5jb250cmFjdC5HYW1lLmFkbWluX3Vwc2VydF9hc3NldChhc3NldDogYnl0ZXMpIC0+IHZvaWQ6CmFkbWluX3Vwc2VydF9hc3NldDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjEwNy0xMDgKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgLy8gZGVmIGFkbWluX3Vwc2VydF9hc3NldChzZWxmLCBhc3NldDogR2FtZUFzc2V0KSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weToxMTUKICAgIC8vIFR4bi5zZW5kZXIgPT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcwogICAgdHhuIFNlbmRlcgogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICA9PQogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MTE0LTExNgogICAgLy8gYXNzZXJ0ICgKICAgIC8vICAgICBUeG4uc2VuZGVyID09IEdsb2JhbC5jcmVhdG9yX2FkZHJlc3MKICAgIC8vICksICJPbmx5IHRoZSBjcmVhdG9yIGNhbiBjYWxsIHRoaXMgbWV0aG9kIgogICAgYXNzZXJ0IC8vIE9ubHkgdGhlIGNyZWF0b3IgY2FuIGNhbGwgdGhpcyBtZXRob2QKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjExNwogICAgLy8gc2VsZi5hc3NldFtvcC5zaGEyNTYoYXNzZXQubmFtZS5ieXRlcyldID0gYXNzZXQuY29weSgpCiAgICBmcmFtZV9kaWcgLTEKICAgIGludGNfMSAvLyAwCiAgICBleHRyYWN0X3VpbnQxNgogICAgZnJhbWVfZGlnIC0xCiAgICBwdXNoaW50IDIgLy8gMgogICAgZXh0cmFjdF91aW50MTYKICAgIGZyYW1lX2RpZyAtMQogICAgY292ZXIgMgogICAgc3Vic3RyaW5nMwogICAgc2hhMjU2CiAgICBieXRlY18xIC8vICJhc3NldCIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZHVwCiAgICBib3hfZGVsCiAgICBwb3AKICAgIGZyYW1lX2RpZyAtMQogICAgYm94X3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLmdhbWUuY29udHJhY3QuR2FtZS5zZWxsYmFja19hc3NldChhc3NldF9pZDogYnl0ZXMsIHF1YW50aXR5OiB1aW50NjQpIC0+IHZvaWQ6CnNlbGxiYWNrX2Fzc2V0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MTE5LTEyMAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgc2VsbGJhY2tfYXNzZXQoc2VsZiwgYXNzZXRfaWQ6IEhhc2gsIHF1YW50aXR5OiBRdWFudGl0eSkgLT4gTm9uZToKICAgIHByb3RvIDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MTI3CiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciBpbiBzZWxmLnVzZXIsICJVc2VyIG11c3QgYmUgcmVnaXN0ZXJlZCIKICAgIGJ5dGVjXzAgLy8gInVzZXIiCiAgICB0eG4gU2VuZGVyCiAgICBjb25jYXQKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIFVzZXIgbXVzdCBiZSByZWdpc3RlcmVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weToxMjgKICAgIC8vIGFzc2VydCBhc3NldF9pZCBpbiBzZWxmLmFzc2V0LCAiSW52YWxpZCBhc3NldCBJRCIKICAgIGJ5dGVjXzEgLy8gImFzc2V0IgogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gSW52YWxpZCBhc3NldCBJRAogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MTMwCiAgICAvLyB1c2VyX2JhbGFuY2UgPSBzZWxmLnVzZXJbVHhuLnNlbmRlcl0uYmFsYW5jZS5uYXRpdmUKICAgIGJ5dGVjXzAgLy8gInVzZXIiCiAgICB0eG4gU2VuZGVyCiAgICBjb25jYXQKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnVzZXIgZW50cnkgZXhpc3RzCiAgICBleHRyYWN0IDEwIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBzd2FwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weToxMzEKICAgIC8vIGFzc2V0X3ByaWNlID0gc2VsZi5hc3NldFthc3NldF9pZF0ucHJpY2UubmF0aXZlCiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFzc2V0IGVudHJ5IGV4aXN0cwogICAgZXh0cmFjdCA0IDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBidG9pCiAgICBzd2FwCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weToxMzMKICAgIC8vIGEgPSAoOCArIHNlbGYuYXNzZXRbYXNzZXRfaWRdLmJ5dGVzLmxlbmd0aCkgKiBxdWFudGl0eQogICAgYm94X2xlbgogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYXNzZXQgZW50cnkgZXhpc3RzCiAgICBpbnRjXzIgLy8gOAogICAgKwogICAgZnJhbWVfZGlnIC0xCiAgICAqCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weToxMzQKICAgIC8vIG1iciA9IDJfNTAwICsgKDQwMCAqIChhKSkKICAgIGludGNfMyAvLyA0MDAKICAgICoKICAgIHB1c2hpbnQgMjUwMCAvLyAyNTAwCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weToxMzYKICAgIC8vIHVzZXJfYXNzZXRfaWQgPSBvcC5zaGEyNTYoVHhuLnNlbmRlci5ieXRlcyArIGFzc2V0X2lkKQogICAgdHhuIFNlbmRlcgogICAgZnJhbWVfZGlnIC0yCiAgICBjb25jYXQKICAgIHNoYTI1NgogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MTM3CiAgICAvLyBhc3NlcnQgdXNlcl9hc3NldF9pZCBpbiBzZWxmLnVzZXJfYXNzZXQsICJObyBhc3NldHMgZm91bmQiCiAgICBieXRlY18zIC8vICJ1c2VyX2Fzc2V0IgogICAgc3dhcAogICAgY29uY2F0CiAgICBkdXBuIDIKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIE5vIGFzc2V0cyBmb3VuZAogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MTM5CiAgICAvLyBzZWxmLnVzZXJfYXNzZXRbdXNlcl9hc3NldF9pZF0gPj0gcXVhbnRpdHkKICAgIGR1cAogICAgYm94X2dldAogICAgc3dhcAogICAgYnRvaQogICAgc3dhcAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudXNlcl9hc3NldCBlbnRyeSBleGlzdHMKICAgIGZyYW1lX2RpZyAtMQogICAgPj0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjEzOC0xNDAKICAgIC8vIGFzc2VydCAoCiAgICAvLyAgICAgc2VsZi51c2VyX2Fzc2V0W3VzZXJfYXNzZXRfaWRdID49IHF1YW50aXR5CiAgICAvLyApLCAiSW5zdWZmaWNpZW50IGFtb3VudCBvZiBhc3NldHMiCiAgICBhc3NlcnQgLy8gSW5zdWZmaWNpZW50IGFtb3VudCBvZiBhc3NldHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjE0Mi0xNDMKICAgIC8vICMgdXBkYXRlIG9yIHJlbW92ZSB1c2VyLWFzc2V0IGJveAogICAgLy8gc2VsZi51c2VyX2Fzc2V0W3VzZXJfYXNzZXRfaWRdIC09IHF1YW50aXR5CiAgICBkdXAKICAgIGJveF9nZXQKICAgIHN3YXAKICAgIGJ0b2kKICAgIHN3YXAKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnVzZXJfYXNzZXQgZW50cnkgZXhpc3RzCiAgICBmcmFtZV9kaWcgLTEKICAgIC0KICAgIGl0b2IKICAgIGRpZyAxCiAgICBzd2FwCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvZ2FtZS9jb250cmFjdC5weToxNDQKICAgIC8vIGlmIHNlbGYudXNlcl9hc3NldFt1c2VyX2Fzc2V0X2lkXSA9PSAwOgogICAgYm94X2dldAogICAgc3dhcAogICAgYnRvaQogICAgc3dhcAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudXNlcl9hc3NldCBlbnRyeSBleGlzdHMKICAgIGJueiBzZWxsYmFja19hc3NldF9hZnRlcl9pZl9lbHNlQDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9nYW1lL2NvbnRyYWN0LnB5OjE0NQogICAgLy8gZGVsIHNlbGYudXNlcl9hc3NldFt1c2VyX2Fzc2V0X2lkXQogICAgZnJhbWVfZGlnIDMKICAgIGJveF9kZWwKICAgIHBvcAoKc2VsbGJhY2tfYXNzZXRfYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MTQ5CiAgICAvLyB1c2VyX2JhbGFuY2UgKyAoYXNzZXRfcHJpY2UgKiBxdWFudGl0eSkgKyBtYnIKICAgIGZyYW1lX2RpZyAxCiAgICBmcmFtZV9kaWcgLTEKICAgICoKICAgIGZyYW1lX2RpZyAwCiAgICArCiAgICBmcmFtZV9kaWcgMgogICAgKwogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MTQ3LTE1MAogICAgLy8gIyBVcGRhdGUgdXNlciBiYWxhbmNlCiAgICAvLyBzZWxmLnVzZXJbVHhuLnNlbmRlcl0uYmFsYW5jZSA9IGFyYzQuVUludDY0KAogICAgLy8gICAgIHVzZXJfYmFsYW5jZSArIChhc3NldF9wcmljZSAqIHF1YW50aXR5KSArIG1icgogICAgLy8gKQogICAgaXRvYgogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MTQ3LTE0OAogICAgLy8gIyBVcGRhdGUgdXNlciBiYWxhbmNlCiAgICAvLyBzZWxmLnVzZXJbVHhuLnNlbmRlcl0uYmFsYW5jZSA9IGFyYzQuVUludDY0KAogICAgYnl0ZWNfMCAvLyAidXNlciIKICAgIHR4biBTZW5kZXIKICAgIGNvbmNhdAogICAgZHVwCiAgICBib3hfZ2V0CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi51c2VyIGVudHJ5IGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL2dhbWUvY29udHJhY3QucHk6MTQ3LTE1MAogICAgLy8gIyBVcGRhdGUgdXNlciBiYWxhbmNlCiAgICAvLyBzZWxmLnVzZXJbVHhuLnNlbmRlcl0uYmFsYW5jZSA9IGFyYzQuVUludDY0KAogICAgLy8gICAgIHVzZXJfYmFsYW5jZSArIChhc3NldF9wcmljZSAqIHF1YW50aXR5KSArIG1icgogICAgLy8gKQogICAgdW5jb3ZlciAyCiAgICByZXBsYWNlMiAxMAogICAgZGlnIDEKICAgIGJveF9kZWwKICAgIHBvcAogICAgYm94X3B1dAogICAgcmV0c3ViCg==","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuZ2FtZS5jb250cmFjdC5HYW1lLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"bareActions":{"create":["NoOp"],"call":[]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type User = {
  registeredAt: bigint,
  name: string,
  balance: bigint
}


/**
 * Converts the ABI tuple representation of a User to the struct representation
 */
export function UserFromTuple(abiTuple: [bigint, string, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.User, APP_SPEC.structs) as User
}

export type GameAsset = {
  name: string,
  description: string,
  price: bigint
}


/**
 * Converts the ABI tuple representation of a GameAsset to the struct representation
 */
export function GameAssetFromTuple(abiTuple: [string, string, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.GameAsset, APP_SPEC.structs) as GameAsset
}

/**
 * The argument types for the Game contract
 */
export type GameArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'register(string)(uint64,string,uint64)': {
      /**
       * The user's name.
       */
      name: string
    }
    'fund_account(pay)uint64': {
      /**
       * The payment transaction.
       */
      payment: AppMethodCallTransactionArgument
    }
    'buy_asset(byte[],uint64)void': {
      /**
       * The hash of the asset name.
       */
      assetId: Uint8Array
      /**
       * The quantity to purchase.
       */
      quantity: bigint | number
    }
    'admin_upsert_asset((string,string,uint64))void': {
      /**
       * The game asset information.
       */
      asset: GameAsset
    }
    'sellback_asset(byte[],uint64)void': {
      /**
       * The hash of the asset name.
       */
      assetId: Uint8Array
      /**
       * The quantity to purchase.
       */
      quantity: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'register(string)(uint64,string,uint64)': [name: string]
    'fund_account(pay)uint64': [payment: AppMethodCallTransactionArgument]
    'buy_asset(byte[],uint64)void': [assetId: Uint8Array, quantity: bigint | number]
    'admin_upsert_asset((string,string,uint64))void': [asset: GameAsset]
    'sellback_asset(byte[],uint64)void': [assetId: Uint8Array, quantity: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type GameReturns = {
  'register(string)(uint64,string,uint64)': User
  'fund_account(pay)uint64': bigint
  'buy_asset(byte[],uint64)void': void
  'admin_upsert_asset((string,string,uint64))void': void
  'sellback_asset(byte[],uint64)void': void
}

/**
 * Defines the types of available calls and state of the Game smart contract.
 */
export type GameTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'register(string)(uint64,string,uint64)' | 'register', {
      argsObj: GameArgs['obj']['register(string)(uint64,string,uint64)']
      argsTuple: GameArgs['tuple']['register(string)(uint64,string,uint64)']
      /**
       * The user's profile information.
       */
      returns: GameReturns['register(string)(uint64,string,uint64)']
    }>
    & Record<'fund_account(pay)uint64' | 'fund_account', {
      argsObj: GameArgs['obj']['fund_account(pay)uint64']
      argsTuple: GameArgs['tuple']['fund_account(pay)uint64']
      /**
       * The user's updated balance.
       */
      returns: GameReturns['fund_account(pay)uint64']
    }>
    & Record<'buy_asset(byte[],uint64)void' | 'buy_asset', {
      argsObj: GameArgs['obj']['buy_asset(byte[],uint64)void']
      argsTuple: GameArgs['tuple']['buy_asset(byte[],uint64)void']
      returns: GameReturns['buy_asset(byte[],uint64)void']
    }>
    & Record<'admin_upsert_asset((string,string,uint64))void' | 'admin_upsert_asset', {
      argsObj: GameArgs['obj']['admin_upsert_asset((string,string,uint64))void']
      argsTuple: GameArgs['tuple']['admin_upsert_asset((string,string,uint64))void']
      returns: GameReturns['admin_upsert_asset((string,string,uint64))void']
    }>
    & Record<'sellback_asset(byte[],uint64)void' | 'sellback_asset', {
      argsObj: GameArgs['obj']['sellback_asset(byte[],uint64)void']
      argsTuple: GameArgs['tuple']['sellback_asset(byte[],uint64)void']
      returns: GameReturns['sellback_asset(byte[],uint64)void']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type GameSignatures = keyof GameTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type GameNonVoidMethodSignatures = keyof GameTypes['methods'] extends infer T ? T extends keyof GameTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Game smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends GameSignatures> = GameTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Game smart contract to the method's return type
 */
export type MethodReturn<TSignature extends GameSignatures> = GameTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type GameCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: undefined} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type GameDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: GameCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Game smart contract
 */
export abstract class GameParamsFactory {
  /**
   * Constructs a no op call for the register(string)(uint64,string,uint64) ABI method
   *
   * Registers a user and returns their profile information.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static register(params: CallParams<GameArgs['obj']['register(string)(uint64,string,uint64)'] | GameArgs['tuple']['register(string)(uint64,string,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'register(string)(uint64,string,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the fund_account(pay)uint64 ABI method
   *
   * Funds a user's account.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static fundAccount(params: CallParams<GameArgs['obj']['fund_account(pay)uint64'] | GameArgs['tuple']['fund_account(pay)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'fund_account(pay)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payment],
    }
  }
  /**
   * Constructs a no op call for the buy_asset(byte[],uint64)void ABI method
   *
   * Buys a game asset.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static buyAsset(params: CallParams<GameArgs['obj']['buy_asset(byte[],uint64)void'] | GameArgs['tuple']['buy_asset(byte[],uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'buy_asset(byte[],uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId, params.args.quantity],
    }
  }
  /**
   * Constructs a no op call for the admin_upsert_asset((string,string,uint64))void ABI method
   *
   * Updates or inserts a game asset.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static adminUpsertAsset(params: CallParams<GameArgs['obj']['admin_upsert_asset((string,string,uint64))void'] | GameArgs['tuple']['admin_upsert_asset((string,string,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'admin_upsert_asset((string,string,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset],
    }
  }
  /**
   * Constructs a no op call for the sellback_asset(byte[],uint64)void ABI method
   *
   * Sell back a game asset to the application.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static sellbackAsset(params: CallParams<GameArgs['obj']['sellback_asset(byte[],uint64)void'] | GameArgs['tuple']['sellback_asset(byte[],uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'sellback_asset(byte[],uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId, params.args.quantity],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Game smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class GameFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `GameFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new GameClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new GameClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Game smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: GameDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new GameClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Game smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Game smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Game smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new GameClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Game smart contract
 */
export class GameClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `GameClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Game app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `GameClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends GameNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `GameClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<GameClient> {
    return new GameClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `GameClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<GameClient> {
    return new GameClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Game smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Game smart contract using the `register(string)(uint64,string,uint64)` ABI method.
     *
     * Registers a user and returns their profile information.
     *
     * @param params The params for the smart contract call
     * @returns The call params: The user's profile information.
     */
    register: (params: CallParams<GameArgs['obj']['register(string)(uint64,string,uint64)'] | GameArgs['tuple']['register(string)(uint64,string,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GameParamsFactory.register(params))
    },

    /**
     * Makes a call to the Game smart contract using the `fund_account(pay)uint64` ABI method.
     *
     * Funds a user's account.
     *
     * @param params The params for the smart contract call
     * @returns The call params: The user's updated balance.
     */
    fundAccount: (params: CallParams<GameArgs['obj']['fund_account(pay)uint64'] | GameArgs['tuple']['fund_account(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GameParamsFactory.fundAccount(params))
    },

    /**
     * Makes a call to the Game smart contract using the `buy_asset(byte[],uint64)void` ABI method.
     *
     * Buys a game asset.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    buyAsset: (params: CallParams<GameArgs['obj']['buy_asset(byte[],uint64)void'] | GameArgs['tuple']['buy_asset(byte[],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GameParamsFactory.buyAsset(params))
    },

    /**
     * Makes a call to the Game smart contract using the `admin_upsert_asset((string,string,uint64))void` ABI method.
     *
     * Updates or inserts a game asset.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    adminUpsertAsset: (params: CallParams<GameArgs['obj']['admin_upsert_asset((string,string,uint64))void'] | GameArgs['tuple']['admin_upsert_asset((string,string,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GameParamsFactory.adminUpsertAsset(params))
    },

    /**
     * Makes a call to the Game smart contract using the `sellback_asset(byte[],uint64)void` ABI method.
     *
     * Sell back a game asset to the application.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    sellbackAsset: (params: CallParams<GameArgs['obj']['sellback_asset(byte[],uint64)void'] | GameArgs['tuple']['sellback_asset(byte[],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(GameParamsFactory.sellbackAsset(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Game smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Game smart contract using the `register(string)(uint64,string,uint64)` ABI method.
     *
     * Registers a user and returns their profile information.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The user's profile information.
     */
    register: (params: CallParams<GameArgs['obj']['register(string)(uint64,string,uint64)'] | GameArgs['tuple']['register(string)(uint64,string,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GameParamsFactory.register(params))
    },

    /**
     * Makes a call to the Game smart contract using the `fund_account(pay)uint64` ABI method.
     *
     * Funds a user's account.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The user's updated balance.
     */
    fundAccount: (params: CallParams<GameArgs['obj']['fund_account(pay)uint64'] | GameArgs['tuple']['fund_account(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GameParamsFactory.fundAccount(params))
    },

    /**
     * Makes a call to the Game smart contract using the `buy_asset(byte[],uint64)void` ABI method.
     *
     * Buys a game asset.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    buyAsset: (params: CallParams<GameArgs['obj']['buy_asset(byte[],uint64)void'] | GameArgs['tuple']['buy_asset(byte[],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GameParamsFactory.buyAsset(params))
    },

    /**
     * Makes a call to the Game smart contract using the `admin_upsert_asset((string,string,uint64))void` ABI method.
     *
     * Updates or inserts a game asset.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    adminUpsertAsset: (params: CallParams<GameArgs['obj']['admin_upsert_asset((string,string,uint64))void'] | GameArgs['tuple']['admin_upsert_asset((string,string,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GameParamsFactory.adminUpsertAsset(params))
    },

    /**
     * Makes a call to the Game smart contract using the `sellback_asset(byte[],uint64)void` ABI method.
     *
     * Sell back a game asset to the application.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    sellbackAsset: (params: CallParams<GameArgs['obj']['sellback_asset(byte[],uint64)void'] | GameArgs['tuple']['sellback_asset(byte[],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(GameParamsFactory.sellbackAsset(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Game smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Game smart contract using the `register(string)(uint64,string,uint64)` ABI method.
     *
     * Registers a user and returns their profile information.
     *
     * @param params The params for the smart contract call
     * @returns The call result: The user's profile information.
     */
    register: async (params: CallParams<GameArgs['obj']['register(string)(uint64,string,uint64)'] | GameArgs['tuple']['register(string)(uint64,string,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GameParamsFactory.register(params))
      return {...result, return: result.return as undefined | GameReturns['register(string)(uint64,string,uint64)']}
    },

    /**
     * Makes a call to the Game smart contract using the `fund_account(pay)uint64` ABI method.
     *
     * Funds a user's account.
     *
     * @param params The params for the smart contract call
     * @returns The call result: The user's updated balance.
     */
    fundAccount: async (params: CallParams<GameArgs['obj']['fund_account(pay)uint64'] | GameArgs['tuple']['fund_account(pay)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GameParamsFactory.fundAccount(params))
      return {...result, return: result.return as undefined | GameReturns['fund_account(pay)uint64']}
    },

    /**
     * Makes a call to the Game smart contract using the `buy_asset(byte[],uint64)void` ABI method.
     *
     * Buys a game asset.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    buyAsset: async (params: CallParams<GameArgs['obj']['buy_asset(byte[],uint64)void'] | GameArgs['tuple']['buy_asset(byte[],uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GameParamsFactory.buyAsset(params))
      return {...result, return: result.return as undefined | GameReturns['buy_asset(byte[],uint64)void']}
    },

    /**
     * Makes a call to the Game smart contract using the `admin_upsert_asset((string,string,uint64))void` ABI method.
     *
     * Updates or inserts a game asset.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    adminUpsertAsset: async (params: CallParams<GameArgs['obj']['admin_upsert_asset((string,string,uint64))void'] | GameArgs['tuple']['admin_upsert_asset((string,string,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GameParamsFactory.adminUpsertAsset(params))
      return {...result, return: result.return as undefined | GameReturns['admin_upsert_asset((string,string,uint64))void']}
    },

    /**
     * Makes a call to the Game smart contract using the `sellback_asset(byte[],uint64)void` ABI method.
     *
     * Sell back a game asset to the application.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    sellbackAsset: async (params: CallParams<GameArgs['obj']['sellback_asset(byte[],uint64)void'] | GameArgs['tuple']['sellback_asset(byte[],uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(GameParamsFactory.sellbackAsset(params))
      return {...result, return: result.return as undefined | GameReturns['sellback_asset(byte[],uint64)void']}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new GameClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Game app
   */
  state = {
  }

  public newGroup(): GameComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a register(string)(uint64,string,uint64) method call against the Game contract
       */
      register(params: CallParams<GameArgs['obj']['register(string)(uint64,string,uint64)'] | GameArgs['tuple']['register(string)(uint64,string,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.register(params)))
        resultMappers.push((v) => client.decodeReturnValue('register(string)(uint64,string,uint64)', v))
        return this
      },
      /**
       * Add a fund_account(pay)uint64 method call against the Game contract
       */
      fundAccount(params: CallParams<GameArgs['obj']['fund_account(pay)uint64'] | GameArgs['tuple']['fund_account(pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.fundAccount(params)))
        resultMappers.push((v) => client.decodeReturnValue('fund_account(pay)uint64', v))
        return this
      },
      /**
       * Add a buy_asset(byte[],uint64)void method call against the Game contract
       */
      buyAsset(params: CallParams<GameArgs['obj']['buy_asset(byte[],uint64)void'] | GameArgs['tuple']['buy_asset(byte[],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.buyAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a admin_upsert_asset((string,string,uint64))void method call against the Game contract
       */
      adminUpsertAsset(params: CallParams<GameArgs['obj']['admin_upsert_asset((string,string,uint64))void'] | GameArgs['tuple']['admin_upsert_asset((string,string,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.adminUpsertAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a sellback_asset(byte[],uint64)void method call against the Game contract
       */
      sellbackAsset(params: CallParams<GameArgs['obj']['sellback_asset(byte[],uint64)void'] | GameArgs['tuple']['sellback_asset(byte[],uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.sellbackAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the Game contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await composer.simulate(options)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as GameComposer
  }
}
export type GameComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the register(string)(uint64,string,uint64) ABI method.
   *
   * Registers a user and returns their profile information.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  register(params?: CallParams<GameArgs['obj']['register(string)(uint64,string,uint64)'] | GameArgs['tuple']['register(string)(uint64,string,uint64)']>): GameComposer<[...TReturns, GameReturns['register(string)(uint64,string,uint64)'] | undefined]>

  /**
   * Calls the fund_account(pay)uint64 ABI method.
   *
   * Funds a user's account.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  fundAccount(params?: CallParams<GameArgs['obj']['fund_account(pay)uint64'] | GameArgs['tuple']['fund_account(pay)uint64']>): GameComposer<[...TReturns, GameReturns['fund_account(pay)uint64'] | undefined]>

  /**
   * Calls the buy_asset(byte[],uint64)void ABI method.
   *
   * Buys a game asset.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buyAsset(params?: CallParams<GameArgs['obj']['buy_asset(byte[],uint64)void'] | GameArgs['tuple']['buy_asset(byte[],uint64)void']>): GameComposer<[...TReturns, GameReturns['buy_asset(byte[],uint64)void'] | undefined]>

  /**
   * Calls the admin_upsert_asset((string,string,uint64))void ABI method.
   *
   * Updates or inserts a game asset.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  adminUpsertAsset(params?: CallParams<GameArgs['obj']['admin_upsert_asset((string,string,uint64))void'] | GameArgs['tuple']['admin_upsert_asset((string,string,uint64))void']>): GameComposer<[...TReturns, GameReturns['admin_upsert_asset((string,string,uint64))void'] | undefined]>

  /**
   * Calls the sellback_asset(byte[],uint64)void ABI method.
   *
   * Sell back a game asset to the application.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sellbackAsset(params?: CallParams<GameArgs['obj']['sellback_asset(byte[],uint64)void'] | GameArgs['tuple']['sellback_asset(byte[],uint64)void']>): GameComposer<[...TReturns, GameReturns['sellback_asset(byte[],uint64)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Game smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): GameComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): GameComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<GameComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<GameComposerResults<TReturns>>
}
export type GameComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

